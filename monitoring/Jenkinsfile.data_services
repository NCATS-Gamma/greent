pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile'
            dir 'deploy'
            additionalBuildArgs '--network=host'
            args "-v ${env.WORKSPACE}:/home/murphy/robokop-interfaces --entrypoint='' --network=host"
        }
    }
    triggers {
        cron ('0 */2 * * *')
    }
    environment {
        TEST_NEO4J = 'test_neo4j_monitor.py'
        TEST_OMNICORP = 'test_omnicorp_monitoring.py'
        TEST_REDIS = 'test_redis_monitor.py'
        TEST_PUBMED_CACHE = 'test_pubmed_cache.py'
        TEST_MESSENGER = 'test_messenger.py'
        TEST_BUILDER = 'test_builder_api.py'
        TEST_RANKER = 'test_ranker_api.py'
        TEST_MANAGER = 'test_manager.py'
        TEST_UBERON_GRAPH= 'test_uber_graph.py'

        ROBOKOP_HOME="${params.ROBOKOP_HOME}"
        OMNICORP_HOST="${params.OMNICORP_HOST}"
        OMNICORP_PORT="${params.OMNICORP_PORT}"
        OMNICORP_DB="${params.OMNICORP_DB}"
        OMNICORP_USER="${params.OMNICORP_USER}"
        OMNICORP_PASSWORD="${params.OMNICORP_PASSWORD}"

        NEO4J_HOST="${params.NEO4J_HOST}"
        NEO4J_USER="${params.NEO4J_USER}"
        NEO4J_HTTP_PORT="${params.NEO4J_HTTP_PORT}"
        NEO4J_BOLT_PORT="${params.NEO4J_BOLT_PORT}"
        NEO4J_HTTPS_PORT="${params.NEO4J_HTTPS_PORT}"
        NEO4J_PASSWORD="${params.NEO4J_PASSWORD}"

        PUBMED_CACHE_HOST="${params.PUBMED_CACHE_HOST}"
        PUBMED_CACHE_PORT="${params.PUBMED_CACHE_PORT}"
        PUBMED_CACHE_PASSWORD="${params.PUBMED_CACHE_PASSWORD}"

        CACHE_HOST="${params.CACHE_HOST}"
        CACHE_PORT="${params.CACHE_PORT}"
        CACHE_PASSWORD="${params.CACHE_PASSWORD}"

        NOTIFICATION_RECIPIENTS="${params.NOTIFICATION_RECIPIENTS}"
        ROBOKOP_MAIL_SERVER="${params.MAIL_SERVER}"
        ROBOKOP_MAIL_USERNAME="${params.MAIL_USERNAME}"
        ROBOKOP_MAIL_PASSWORD="${params.MAIL_PASSWORD}"
        ROBOKOP_MAIL_DEFAULT_SENDER="${params.MAIL_SENDER}"
    }
    stages {
        stage ('Run Tests') {
            parallel {
                stage ('Monitoring Neo4j') {
                    steps {
                        sh "pytest monitoring/${TEST_NEO4J}"
                    }
                    post {
                        failure {
                            sh "python monitoring/notify.py -e ${NOTIFICATION_RECIPIENTS} -m 'Neo4j is failing.' -s ${BUILD_TAG}"
                        }
                    }
                }
                stage ('Monitoring main Redis') {
                    steps {
                        sh "pytest monitoring/${TEST_REDIS}"
                    } 
                    post {
                        failure {
                            sh "python monitoring/notify.py -e ${NOTIFICATION_RECIPIENTS} -m 'Redis is failing.' -s ${BUILD_TAG}"
                        }
                    }
                }
                stage ('Monitoring Omnicorp') {
                    steps {
                        sh "pytest monitoring/${TEST_OMNICORP}"
                    }
                    post {
                        failure {
                            sh "python monitoring/notify.py -e ${NOTIFICATION_RECIPIENTS} -m 'Omnicorp is failing.' -s ${BUILD_TAG}"
                        }
                    }
                }
                stage ('Monitoring Pubmed Cache') {
                    steps {
                        sh "pytest monitoring/${TEST_PUBMED_CACHE}"
                    }
                    post {
                        failure {
                            sh "python monitoring/notify.py -e ${NOTIFICATION_RECIPIENTS} -m 'Pubmed is failing.' -s ${BUILD_TAG}"
                        }
                    }
                }
                stage ('Monitoring UberonGraph ') {
                    steps {
                        sh "pytest monitoring/${TEST_UBERON_GRAPH}"
                    }
                    post {
                        failure {
                            sh "python monitoring/notify.py -e ${NOTIFICATION_RECIPIENTS} -m 'Uberongraph is failing.' -s ${BUILD_TAG}"
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            echo "Everything seems good."
        }
        failure {
            echo "Something was wrong!!"
        }
    }
}